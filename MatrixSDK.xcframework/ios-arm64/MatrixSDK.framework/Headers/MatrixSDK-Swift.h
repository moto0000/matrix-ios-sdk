// Generated by Apple Swift version 5.3.2 (swiftlang-1200.0.45 clang-1200.0.32.28)
#ifndef MATRIXSDK_SWIFT_H
#define MATRIXSDK_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#import <MatrixSDK/MatrixSDK.h>

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="MatrixSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif


@class MXCredentials;
@class MXEvent;
@class MXRoomState;
@class MXPushRule;

/// Background push rules manager. Does work independent from a <code>MXNotificationCenter</code>.
SWIFT_CLASS("_TtC9MatrixSDK28MXBackgroundPushRulesManager")
@interface MXBackgroundPushRulesManager : NSObject
/// Initializer.
/// \param restClient Rest client to fetch initial push rules.
///
- (nonnull instancetype)initWithCredentials:(MXCredentials * _Nonnull)credentials OBJC_DESIGNATED_INITIALIZER;
/// Handle account data from a sync response.
/// \param accountData The account data to be handled.
///
- (void)handleAccountData:(NSDictionary * _Nonnull)accountData;
/// Check whether the given room is mentions only.
/// \param roomId The room identifier to be checked
///
///
/// returns:
/// If the room is mentions only.
- (BOOL)isRoomMentionsOnly:(NSString * _Nonnull)roomId SWIFT_WARN_UNUSED_RESULT;
/// Fetch push rule matching an event.
/// \param event The event to be matched.
///
/// \param roomState Room state.
///
/// \param currentUserDisplayName Display name of the current user.
///
///
/// returns:
/// Push rule matching the event.
- (MXPushRule * _Nullable)pushRuleMatching:(MXEvent * _Nonnull)event roomState:(MXRoomState * _Nonnull)roomState currentUserDisplayName:(NSString * _Nullable)currentUserDisplayName SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class MXRoomSummary;

/// This class can be used to sync in background, keeping the user offline. It does not initiate MXSession or MXCrypto instances.
/// Sync results are written to a MXSyncResponseFileStore.
SWIFT_CLASS("_TtC9MatrixSDK23MXBackgroundSyncService")
@interface MXBackgroundSyncService : NSObject
/// Initializer
/// \param credentials account credentials
///
- (nonnull instancetype)initWithCredentials:(MXCredentials * _Nonnull)credentials OBJC_DESIGNATED_INITIALIZER;
/// Check whether the given room is mentions only.
/// \param roomId The room identifier to be checked
///
///
/// returns:
/// If the room is mentions only.
- (BOOL)isRoomMentionsOnly:(NSString * _Nonnull)roomId SWIFT_WARN_UNUSED_RESULT;
/// Fetch the summary for the given room identifier.
/// \param roomId The room identifier to fetch.
///
///
/// returns:
/// Summary of room.
- (MXRoomSummary * _Nullable)roomSummaryForRoomId:(NSString * _Nonnull)roomId SWIFT_WARN_UNUSED_RESULT;
/// Fetch push rule matching an event.
/// \param event The event to be matched.
///
/// \param roomState Room state.
///
///
/// returns:
/// Push rule matching the event.
- (MXPushRule * _Nullable)pushRuleMatching:(MXEvent * _Nonnull)event roomState:(MXRoomState * _Nonnull)roomState SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end





/// Util class to log memory footprint and allocate memory for debugging purposes.
SWIFT_CLASS("_TtC9MatrixSDK8MXMemory")
@interface MXMemory : NSObject
/// Formatted memory footprint for debugging purposes
///
/// returns:
/// Memory footprint in MBs as a readable string
+ (NSString * _Nonnull)formattedMemoryFootprint SWIFT_WARN_UNUSED_RESULT;
+ (NSUInteger)memoryAvailable SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)formattedMemoryAvailable SWIFT_WARN_UNUSED_RESULT;
/// Allocates some memory
/// \param numberOfBytes Amount of memory to be allocated, in number of bytes
///
+ (void)allocateMemoryOfSizeWithNumberOfBytes:(NSInteger)numberOfBytes;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface MXRestClient (SWIFT_EXTENSION(MatrixSDK))
/// The register fallback page to make registration via a web browser or a web view.
@property (nonatomic, readonly, copy) NSURL * _Nonnull registerFallbackURL SWIFT_DEPRECATED_OBJC("Swift property 'MXRestClient.registerFallbackURL' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
/// Get the login fallback page to make login via a web browser or a web view.
/// Presently only server auth v1 is supported.
///
/// returns:
/// the fallback page URL.
@property (nonatomic, readonly, copy) NSURL * _Nonnull loginFallbackURL SWIFT_DEPRECATED_OBJC("Swift property 'MXRestClient.loginFallbackURL' uses '@objc' inference deprecated in Swift 4; add '@objc' to provide an Objective-C entrypoint");
@end








SWIFT_CLASS("_TtC9MatrixSDK23MXSyncResponseFileStore")
@interface MXSyncResponseFileStore : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class MXSyncResponse;

/// Protocol defining the storage for a sync response.
SWIFT_PROTOCOL("_TtP9MatrixSDK19MXSyncResponseStore_")
@protocol MXSyncResponseStore <NSObject>
/// Open the store with the given credentials
/// \param credentials Credentials
///
- (void)openWithCredentials:(MXCredentials * _Nonnull)credentials;
/// The opaque token for the start of the sync response, currenly stored in the store
@property (nonatomic, copy) NSString * _Nullable prevBatch;
/// Sync response object, currently stored in the store
@property (nonatomic, strong) MXSyncResponse * _Nullable syncResponse;
/// Fetch event in the store
/// \param eventId Event identifier to be fetched.
///
/// \param roomId Room identifier to be fetched.
///
- (MXEvent * _Nullable)eventWithEventId:(NSString * _Nonnull)eventId inRoom:(NSString * _Nonnull)roomId SWIFT_WARN_UNUSED_RESULT;
/// Fetch room summary for an invited room. Just uses the data in syncResponse to guess the room display name
/// \param roomId Room identifier to be fetched
///
/// \param summary A room summary (if exists) which user had before a sync response
///
- (MXRoomSummary * _Nullable)roomSummaryForRoomId:(NSString * _Nonnull)roomId using:(MXRoomSummary * _Nullable)summary SWIFT_WARN_UNUSED_RESULT;
/// Delete all data in the store
- (void)deleteData;
@end


@interface MXSyncResponseFileStore (SWIFT_EXTENSION(MatrixSDK)) <MXSyncResponseStore>
- (void)openWithCredentials:(MXCredentials * _Nonnull)credentials;
@property (nonatomic, copy) NSString * _Nullable prevBatch;
@property (nonatomic, strong) MXSyncResponse * _Nullable syncResponse;
- (MXEvent * _Nullable)eventWithEventId:(NSString * _Nonnull)eventId inRoom:(NSString * _Nonnull)roomId SWIFT_WARN_UNUSED_RESULT;
- (MXRoomSummary * _Nullable)roomSummaryForRoomId:(NSString * _Nonnull)roomId using:(MXRoomSummary * _Nullable)summary SWIFT_WARN_UNUSED_RESULT;
- (void)deleteData;
@end


@class NSString;

SWIFT_CLASS("_TtC9MatrixSDK30MXUIKitApplicationStateService")
@interface MXUIKitApplicationStateService : NSObject
@property (nonatomic, readonly) UIApplicationState applicationState;
@property (nonatomic, readonly) NSTimeInterval backgroundTimeRemaining;
+ (NSString * _Nonnull)readableApplicationStateWithApplicationState:(UIApplicationState)applicationState SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)readableEstimatedBackgroundTimeRemainingWithBackgroundTimeRemaining:(NSTimeInterval)backgroundTimeRemaining SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif
